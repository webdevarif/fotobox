   //*================ SASS HELPERS ================*/
   //*============================================================================
   //Convert pixels to ems
   //eg. for a relational value of 12px write em(12) when the parent is 16px
   //if the parent is another value say 24px write em(12, 24)
   //Based on https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_px-to-em.scss
   //==============================================================================*/
@function em($pxval, $base: $font-base) {
  @if not unitless($pxval) {
  $pxval: strip-units($pxval);
  }
  @if not unitless($base) {
  $base: strip-units($base);
  }
  @return ($pxval / $base) * 1em;
}
// COLORS FUNCTIONS
@function color($color-name){
  @return map-get($theme-colors, $color-name);
}
@function fonts($font-name){
  @return map-get($theme-fonts, $font-name);
}
@function weight($weight-name){
  @return map-get($font-weights, $weight-name)
} 
//*============================================================================
//Strips the unit from a number.
//@param {Number (With Unit)} $value
//@example scss - Usage
//$dimension: strip-units(10em);
//@example css - CSS Output
//$dimension: 10;
//@return {Number (Unitless)}
//based on https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_strip-units.scss
//==============================================================================*/
 @function strip-units($value) {
    @return ($value / ($value * 0 + 1));
 }
//*============================================================================
  // Return a color based on the brightness of an existing color.
  // Need to pass in brightness because it is calculated with Liquid.
  // @param {Number} $brightness
  // @param {String} $color
  // @example scss - Usage
  //   $focusColor: adaptiveColor(#000, 0);
  // @example css - CSS Output
  //   $focusColor: #404040;
  // @return {String}

  // @adaptiveColor used for changing text
  // @adaptiveBackgroundColor used for background colors where the change doesn't
  // need to be as strong
// ==============================================================================*/  
@function adaptiveColor($color, $brightness) {
 @if $brightness <= 26 {
 @return lighten($color, 25%);
 }
 @if $brightness <= 64 {
 @return lighten($color, 15%);
 } @else {
 @return darken($color, 10%);
 }
}

@function adaptiveBackgroundColor($color, $brightness) {
 @if $brightness <= 26 {
 @return lighten($color, 15%);
 }
 @if $brightness <= 64 {
 @return lighten($color, 10%);
 } @else {
 @return darken($color, 5%);
 }
}
// Helper function to replace negative values with 0
@function valid-radius($radius) {
  $return: ();
  @each $value in $radius {
    @if type-of($value) == number {
      $return: append($return, max($value, 0));
    } @else {
      $return: append($return, $value);
    }
  }
  @return $return;
}

//Function For Version Base Color [@set-color($primary-color)]
@function set-color($color){
    @if (lightness($color) > 40%){
        @return #000;
    }
    @else{
        @return #fff;
    }
}
